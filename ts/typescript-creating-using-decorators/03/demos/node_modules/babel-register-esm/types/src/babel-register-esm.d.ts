/**
 * @param {string} specifier
 * @param {{
 *   conditions: !Array<string>,
 *   parentURL: !(string | undefined),
 * }} context
 * @param {Function} nextResolve
 * @returns {Promise<{ url: string }>}
 */
export function resolve(specifier: string, context: {
    conditions: Array<string>;
    parentURL: (string | undefined);
}, nextResolve: Function): Promise<{
    url: string;
}>;
/**
 * @param {string} url
 * @param {Object} context
 * @param {Function} defaultGetFormat
 * @returns {Promise<{ format: string }>}
 */
export function getFormat(url: string, context: Object, defaultGetFormat: Function): Promise<{
    format: string;
}>;
/**
 * @param {!(string | SharedArrayBuffer | Uint8Array)} source
 * @param {{
 *   format: string,
 *   url: string,
 * }} context
 * @param {Function} [defaultTransformSource]
 * @returns {Promise<{ source: !(string | SharedArrayBuffer | Uint8Array) }>}
 */
export function transformSource(source: (string | SharedArrayBuffer | Uint8Array), context: {
    format: string;
    url: string;
}, defaultTransformSource?: Function | undefined): Promise<{
    source: (string | SharedArrayBuffer | Uint8Array);
}>;
/**
 * @param {string} url
 * @param {{
 *   format: string,
 * }} context
 * @param {Function} nextLoad
 * @returns {Promise<{ source: !(string | SharedArrayBuffer | Uint8Array), format: string}>}
 */
export function load(url: string, context: {
    format: string;
}, nextLoad: Function): Promise<{
    source: (string | SharedArrayBuffer | Uint8Array);
    format: string;
}>;
//# sourceMappingURL=babel-register-esm.d.ts.map